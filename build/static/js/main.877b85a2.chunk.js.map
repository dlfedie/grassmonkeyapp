{"version":3,"sources":["components/images/monkeyMap.jpg","redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/monkeyReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/monkeySaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/CountDown/CountDown.jsx","components/AboutPage/AboutPage.js","components/InfoPage/InfoPage.js","components/App/App.js","index.js"],"names":["module","exports","combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","grassMonkeyPlayers","monkey","gender","chosenPlayer","allPlaces","chosenPlace","numberOfWildcards","rootReducer","errors","user","monkeys","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","fetchPlaces","fetchCurrentPlace","editCurrentPlace","fetchWildcards","addWildcard","resetWildcards","monkeySaga","place","id","wildcards","delete","rootSaga","all","connect","props","className","onClick","dispatch","to","Footer","LoginPage","username","password","login","event","preventDefault","handleInputChangeFor","propertyName","setState","target","value","this","role","onSubmit","htmlFor","name","onChange","Component","RegisterPage","ComponentToShow","ComponentToProtect","component","otherProps","CountDownTimer","completions","onComplete","randomMonkeyNum","Math","floor","random","chosenMonkey","key","seconds","color","alpha","size","reduxStore","chosen","AboutPage","handleAddWildcard","currentPlace","src","monkeyMap","alt","Button","variant","style","margin","CountDown","InfoPage","bloo","handleResetWildcards","placesToGo","places","map","App","exact","from","path","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.877b85a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monkeyMap.b5c67a45.jpg\";","import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","import { combineReducers } from 'redux';\n\nconst grassMonkeyPlayers = (state = [\n    { monkey: 'Graham', gender: 'he' },\n    { monkey: 'Fedie', gender: 'he' },\n    { monkey: 'H', gender: 'he' },\n    { monkey: 'Tony', gender: 'he' },\n    { monkey: 'Ben', gender: 'he' },\n    { monkey: 'Vampire', gender: 'he' },\n    { monkey: 'Rafferty', gender: 'he' },\n    { monkey: 'Pat', gender: 'he' },\n    { monkey: 'Treece', gender: 'he' },\n    { monkey: 'DVB', gender: 'he' },\n    { monkey: 'Wrangham', gender: 'he' },\n    { monkey: 'Carly', gender: 'she' },\n    { monkey: 'Brenda', gender: 'she' },\n    { monkey: 'Boomer', gender: 'she' },\n    { monkey: 'Kristin', gender: 'she' },\n    { monkey: 'Corinne', gender: 'she' },\n    { monkey: 'Amy', gender: 'she' },\n    { monkey: 'Sarah', gender: 'she' },\n    { monkey: 'Smuder', gender: 'she' },\n    { monkey: 'Kathy', gender: 'she' },\n    { monkey: 'Shorts', gender: 'she' },\n    { monkey: 'Wood', gender: 'he' },\n    { monkey: 'Adro', gender: 'he' },\n    { monkey: 'Jessica', gender: 'she' },\n    { monkey: 'Steve II', gender: 'he' },\n    { monkey: 'Benj', gender: 'he' },\n    { monkey: 'Amber', gender: 'she' },\n\n\n], action) => {\n    switch (action.type) {\n        case 'GET_MONKEYS':\n            return [{ monkey: 'Graham', gender: 'he' },\n            { monkey: 'Fedie', gender: 'he' },\n            { monkey: 'H', gender: 'he' },\n            { monkey: 'Tony', gender: 'he' },\n            { monkey: 'Ben', gender: 'he' },\n            { monkey: 'Vampire', gender: 'he' },\n            { monkey: 'Rafferty', gender: 'he' },\n            { monkey: 'Pat', gender: 'he' },\n            { monkey: 'Treece', gender: 'he' },\n            { monkey: 'DVB', gender: 'he' },\n            { monkey: 'Wrangham', gender: 'he' },\n            { monkey: 'Carly', gender: 'she' },\n            { monkey: 'Brenda', gender: 'she' },\n            { monkey: 'Boomer', gender: 'she' },\n            { monkey: 'Kristin', gender: 'she' },\n            { monkey: 'Corinne', gender: 'she' },\n            { monkey: 'Amy', gender: 'she' },\n            { monkey: 'Sarah', gender: 'she' },\n            { monkey: 'Smuder', gender: 'she' },\n            { monkey: 'Kathy', gender: 'she' },\n            { monkey: 'Shorts', gender: 'she' },\n            { monkey: 'Wood', gender: 'he' },\n            { monkey: 'Adro', gender: 'he' },\n            { monkey: 'Jessica', gender: 'she' },\n            { monkey: 'Steve II', gender: 'he' },\n            { monkey: 'Benj', gender: 'he' },\n            { monkey: 'Amber', gender: 'she' },];\n        default:\n            return state;\n    }\n};\n\nconst chosenPlayer = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_MONKEY':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nconst allPlaces = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PLACES':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nconst chosenPlace = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_CURRENT_PLACE':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nconst numberOfWildcards = (state = 0, action) => {\n    switch (action.type) {\n        case 'SET_NUMBER_OF_WILDCARDS':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    grassMonkeyPlayers,\n    chosenPlayer,\n    allPlaces,\n    chosenPlace,\n    numberOfWildcards,\n});","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport monkeys from './monkeyReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  monkeys,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* fetchPlaces(action) {\n    yield console.log('in fetch places saga');\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n        const response = yield axios.get(`/api/places`, config)\n        yield put({ type: 'SET_PLACES', payload: response.data })\n    } catch (error) {\n        console.log('error in fetch places saga:', error)\n    }\n};\n\nfunction* fetchCurrentPlace(action) {\n    yield console.log('in fetch current place saga');\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n        const response = yield axios.get(`/api/places/current`, config)\n        yield put({ type: 'SET_CURRENT_PLACE', payload: response.data })\n    } catch (error) {\n        console.log('error in fetch current place saga:', error)\n    }\n};\n\nfunction* editCurrentPlace(action) {\n    yield console.log('in edit place, selecting:', action.payload);\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n        const place = action.payload\n        yield axios.put(`/api/places/edit`, {id: place}, config);\n        yield put({\n            type: 'FETCH_CURRENT_PLACE'\n        });\n\n    } catch (error) {\n        console.log('error in edit current place saga:', error);\n    }\n};\n\nfunction* fetchWildcards(action) {\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n        const response = yield axios.get(`/api/wildcards/`, config)\n        yield put({ type: 'SET_NUMBER_OF_WILDCARDS', payload: response.data.wildcards })\n\n    } catch (error) {\n        console.log('error in fetch wildcards saga:', error);\n    }\n};\n\nfunction* addWildcard(action) {\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n        yield axios.put(`/api/wildcards/`, config)\n        yield put({ type: 'FETCH_WILDCARDS'});\n\n    } catch (error) {\n        console.log('error in fetch wildcards saga:', error);\n    }\n};\n\nfunction* resetWildcards(action) {\n    try {\n        const config = {\n            headers: { 'Content-Type': 'application/json' },\n            withCredentials: true,\n        };\n        yield axios.delete(`/api/wildcards/`, config);\n        yield put({ type: 'FETCH_WILDCARDS' });\n\n    } catch (error) {\n        console.log('error in fetch wildcards saga:', error);\n    }\n};\n\n\n\nfunction* monkeySaga() {\n    yield takeLatest('FETCH_PLACES', fetchPlaces);\n    yield takeLatest('FETCH_CURRENT_PLACE', fetchCurrentPlace);\n    yield takeLatest('EDIT_CURRENT_LOCATION', editCurrentPlace);\n    yield takeLatest('FETCH_WILDCARDS', fetchWildcards);\n    yield takeLatest('ADD_WILDCARD', addWildcard);\n    yield takeLatest('RESET_WILDCARDS', resetWildcards)\n}\n\nexport default monkeySaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport monkeySaga from './monkeySaga'\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    monkeySaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/about\">\n      <h2 className=\"nav-title\">Grass Monkey Bus Tour 2019!</h2>\n    </Link>\n    <div className=\"nav-right\">\n      {/* <Link className=\"nav-link\" to=\"/home\"> */}\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {/* {props.user.id ? 'Home' : 'Login / Register'} */}\n      {/* </Link> */}\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/info\">\n            Edit Page\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      {/* <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link> */}\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css';\nimport { Link } from 'react-router-dom';\n\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    <Link className=\"footer-link\" to=\"/home\">&copy; PokeMonkey</Link>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\nimport CountDown from 'react-countdown-clock';\nimport { connect } from 'react-redux';\n\n\n\nclass CountDownTimer extends Component {\n    state = {\n        completions: 0,\n    }\n\n    componentDidMount() {\n        let randomMonkeyNum = Math.floor(Math.random() * 21);\n        console.log(randomMonkeyNum);\n        let chosenMonkey = this.props.monkeys[randomMonkeyNum];\n\n\n        this.props.dispatch({\n            type: 'SET_MONKEY',\n            payload: chosenMonkey\n        });\n        this.props.dispatch({\n            type: 'FETCH_CURRENT_PLACE'\n        });\n        this.props.dispatch({\n            type: 'FETCH_WILDCARDS'\n        });\n    }\n\n    onComplete = () => {\n        this.setState({\n            completions: this.state.completions + 1\n        },\n            () => console.log('completions', this.state.completions)\n        )\n\n        let randomMonkeyNum = Math.floor(Math.random() * 26);\n        console.log(randomMonkeyNum);\n        let chosenMonkey = this.props.monkeys[randomMonkeyNum];\n\n\n        this.props.dispatch({\n            type: 'SET_MONKEY',\n            payload: chosenMonkey\n        });\n        this.props.dispatch({\n            type: 'FETCH_CURRENT_PLACE'\n        });\n        this.props.dispatch({\n            type: 'FETCH_WILDCARDS'\n        });\n    }\n\n    render() {\n        return (\n            <CountDown\n                key={this.state.completions}\n                seconds={15}\n                color=\"#000\"\n                alpha={0.9}\n                size={150}\n                onComplete={this.onComplete}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => {\n    return {\n        monkeys: reduxStore.monkeys.grassMonkeyPlayers,\n        chosen: reduxStore.monkeys.chosenPlayer,\n    };\n};\n\nexport default connect(mapStateToProps)(CountDownTimer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\n\nimport monkeyMap from '../images/monkeyMap.jpg';\n// import moment from 'moment';\n\n// import Clock from '../Clock/Clock';\nimport CountDownTimer from '../CountDown/CountDown';\n\n\nclass AboutPage extends Component {\n  \n\n  componentDidMount() {\n    this.fetchCurrentPlace();\n\n  }\n\n\n  fetchCurrentPlace = () => {\n    this.props.dispatch({\n      type: 'FETCH_CURRENT_PLACE'\n    })\n  };\n\n  handleAddWildcard = () => {\n    console.log('clicked button');\n    \n    this.props.dispatch({\n      type: 'ADD_WILDCARD'\n    })\n  };\n\n  \n\n  render() {\n\n\n\n\n    return (\n      <div>\n        <h1>Monkey Madness!</h1>\n        <h2>Monkeys are currently at:</h2>\n        <h2>{this.props.currentPlace.place}</h2>\n        <img src={monkeyMap} alt=\"map\" className=\"monkeyMap\" />\n        <h2>(times are approximate..)</h2>\n        <p>6:30-8:00 - Dinner at Ginger Hop</p>\n        <p>8:00 - Party bus pickup!</p>\n        <p>9:00-10:00 - Cedar Inn for Monkey Awards</p>\n        <p>10:30-12:00 - Uptown</p>\n        <p>12:30-2:00 - The Front</p>\n        <h3>{this.props.wildcards} <span className=\"wildcards\">Wildcards</span> have joined the party</h3>\n        <div className=\"wildcardButton\">\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleAddWildcard} style={{ margin: '5px' }} className=\"wildcardButton\">\n            Add a Wildcard!!\n          </Button>\n        </div>\n        <h2>Timer of Regrets</h2>\n        <div className=\"countdownTimer\">\n          <CountDownTimer />\n        </div>\n        <h3>until {this.props.chosen.monkey} does something {this.props.chosen.gender}'ll regret</h3>\n        {/* {JSON.stringify(this.props.monkeys)} */}\n        <h3>Welcome shot recipe:</h3>\n        <p>1 part 99 Bananas, 1 hug from any Monkey</p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = reduxStore => {\n  return {\n    monkeys: reduxStore.monkeys.grassMonkeyPlayers,\n    chosen: reduxStore.monkeys.chosenPlayer,\n    currentPlace: reduxStore.monkeys.chosenPlace,\n    wildcards: reduxStore.monkeys.numberOfWildcards,\n  };\n};\n\nexport default connect(mapStateToProps)(AboutPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\n\n\nclass InfoPage extends Component {\n\n  state = {\n    bloo: 0,\n  }\n\n  componentDidMount() {\n    this.fetchPlaces();\n    this.fetchCurrentPlace();\n\n  };\n\n  fetchPlaces = () => {\n    this.props.dispatch({\n      type: 'FETCH_PLACES'\n    })\n  };\n\n  fetchWildcards = () => {\n    this.props.dispatch({\n      type: 'FETCH_WILDCARDS'\n    })\n  };\n\n  fetchCurrentPlace = () => {\n    this.props.dispatch({\n      type: 'FETCH_CURRENT_PLACE'\n    })\n  };\n\n  handleResetWildcards = () => {\n    console.log('clicked button');\n\n    this.props.dispatch({\n      type: 'RESET_WILDCARDS'\n    })\n  };\n  \n\n\n  render() {\n\n    let placesToGo = this.props.places.map((place) => {\n      return <option key={place.id} value={place.id}>{place.place}</option>\n    })\n\n    return (\n      <div>\n        <h1>Edit Page</h1>\n        {/* {JSON.stringify(this.props.places)} */}\n        {/* {JSON.stringify(this.props.currentPlace)} */}\n        <h2>Current Place: {this.props.currentPlace.place}</h2>\n        <select\n          onChange={event =>\n            this.props.dispatch({\n              type: 'EDIT_CURRENT_LOCATION',\n              payload: event.target.value\n            })}\n          className=\"selector\"\n          >\n          {placesToGo}\n        </select>\n        <div className=\"wildcardButton\">\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleResetWildcards} style={{ margin: '5px' }} className=\"wildcardButton\">\n            Reset Wildcards\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = reduxStore => {\n  return {\n    monkeys: reduxStore.monkeys.grassMonkeyPlayers,\n    chosen: reduxStore.monkeys.chosenPlayer,\n    places: reduxStore.monkeys.allPlaces,\n    currentPlace: reduxStore.monkeys.chosenPlace,\n    wildcards: reduxStore.monkeys.numberOfWildcards,\n  };\n};\n\nexport default connect(mapStateToProps)(InfoPage);\n","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport AboutPage from '../AboutPage/AboutPage';\n// import UserPage from '../UserPage/UserPage';\nimport InfoPage from '../InfoPage/InfoPage';\n\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/about\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={AboutPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}